// dashboard eventconst hamBurger = document.querySelector(".toggle-btn");hamBurger.addEventListener("click", function () {    document.querySelector("#sidebar").classList.toggle("expand");});$(document).ready(function (){    $(document).on('click','#Branch_btn',function (e){        if (e.target.value != undefined){            // ajax            $.ajax({                url: '../controller/SalesController.php',                type: 'POST',                data: {                    branchName: e.target.value,                    action: 'GetMonthlyYearSale'                },                success: function (data){                   $('#con_').html(data)                }            })        }    })    let myChart = null; // Global variable for Chart instance    let isFetching = false; // Prevent multiple overlapping AJAX calls    function updateChart() {        if (isFetching) return; // Prevent multiple requests        isFetching = true;        $.ajax({            url: '../controller/SalesController.php',            type: 'POST',            data: { action: 'GetMonthlySalesChart' },            dataType: 'json',            success: function (data) {                const labels = data.map(row => getMonthName(row.sale_month));                const salesData = data.map(sale => sale.total_sales);                const ctx = document.getElementById('myChart').getContext('2d');                if (!ctx) {                    console.error('Canvas element not found.');                    isFetching = false;                    return;                }                // Check if chart exists, update instead of re-creating                if (myChart) {                    myChart.data.labels = labels;                    myChart.data.datasets[0].data = salesData;                    myChart.update(); // Update instead of destroy-recreate                } else {                    // Create the chart if it doesn't exist yet                    myChart = new Chart(ctx, {                        type: 'bar',                        data: {                            labels: labels,                            datasets: [{                                label: 'Sales of the Month',                                data: salesData,                                backgroundColor: '#34d399',                                borderWidth: 2,                            }]                        },                        options: {                            animation: {                                duration: 1500,                                easing: 'easeOutBounce'                            },                            scales: {                                y: { beginAtZero: true }                            }                        }                    });                }            },            error: function (xhr, status, error) {                console.error('AJAX Error:', status, error);            },            complete: function () {                isFetching = false; // Allow next request after completion            }        });    }// Run `updateChart` every 5 seconds    setInterval(updateChart, 5000);// Initial Load    updateChart();    // create new account    $(document).on('submit','#createAdninAccount',function (event){        event.preventDefault()        var formData = new FormData(this);        formData.append('action','createNewAccount')        $.ajax({            url: '../controller/authController.php',            type: 'POST',            data: formData,            contentType: false,            processData: false,            dataType: 'json',            success: function (res){                function ErrorMessage(field,message){                    if (message){                        $(`#${field}_msg`).html(message)                        $(`#${field}`).addClass('is-invalid')                    }else {                        $(`#${field}_msg`).html('')                        $(`#${field}`).removeClass('is-invalid')                    }                }                if (res.errors){                    ErrorMessage('NewUsername',res.errors.NewUsername)                    ErrorMessage('NewPassword',res.errors.NewPassword)                    ErrorMessage('Newfullname',res.errors.Newfullname)                    return                }                // show the success message                if (res.success === true){                    Swal.fire({                        text: res.message,                        icon: "success",                        toast: true,                        position: 'top-end',                        showConfirmButton: false,                        timer: 1000,  // Auto close after 1 second                        timerProgressBar: true  // Optional: Shows a progress bar indicating the remaining time                    });                    $('#CreateCredentialModal').modal('hide')                }                if (res.success === false){                    Swal.fire({                        text: res.message,                        icon: "warning",                        toast: true,                        position: 'top-end',                        showConfirmButton: false,                        timer: 1000,  // Auto close after 1 second                        timerProgressBar: true  // Optional: Shows a progress bar indicating the remaining time                    });                }            }        })    })    //Update  Credential $(document).on('submit','#updateCrdentialForm',function (event){     event.preventDefault()     var formData = new FormData(this)     formData.append('action','SaveChanges')         $.ajax({             url: '../controller/authController.php',             type: 'post',             data: formData,             contentType: false,             processData: false,             dataType: 'json',             success: function (res){                 if (res.success === false){                     Swal.fire({                         text: res.message,                         icon: "warning",                         toast: true,                         position: 'top-end',                         showConfirmButton: false,                         timer: 1000,  // Auto close after 1 second                         timerProgressBar: true  // Optional: Shows a progress bar indicating the remaining time                     });                     return                 }                 Swal.fire({                     text: res.message,                     icon: "success"                 });                 setTimeout(()=>{window.location.reload()},2000)             }         }) })    // Helper function to convert month number to name    function getMonthName(monthNumber) {        const monthNames = ["January", "February", "March", "April", "May", "June",            "July", "August", "September", "October", "November", "December"];        return monthNames[monthNumber - 1];    }})function validatePassword(confirmPassId, passwordId, messageId, buttonId) {    const confirmPass = document.getElementById(confirmPassId);    const password = document.getElementById(passwordId);    const btn = document.getElementById(buttonId);    confirmPass.addEventListener('keyup', function () {        if (password.value !== confirmPass.value) {            document.getElementById(messageId).innerText = 'Passwords do not match. Please try again!';            confirmPass.classList.add('is-invalid');            btn.disabled = true;        } else {            document.getElementById(messageId).innerText = '';            confirmPass.classList.remove('is-invalid');            btn.disabled = false;        }    });}// Call the function for specific elementsvalidatePassword('ConfirmPassword', 'NewPassword', 'ConfirmPassword_msg', 'btn_createAccount');validatePassword('ConfirmPassword2', 'updatedPassword', 'ConfirmPassword2_msg', 'saveChanges_btn');