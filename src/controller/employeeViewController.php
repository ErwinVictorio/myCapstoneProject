<?phpnamespace controller;include_once '../model/employeeViewModel.php';use model\employeeViewModel;class employeeViewController{    public function showProductInfo()    {        $model = new employeeViewModel();        $productId = $_POST['productId'];        if (isset($productId)){            $data = $model->showProductInfoBaseOnId($productId);            echo json_encode($data);        }    }    public function storeSale()    {        $sales = new employeeViewModel();        $currentStock = new employeeViewModel();        $employeeName = $_POST['EmployeeName'];        $salesAmount = $_POST['price'];        $quantity = (int)$_POST['quantity'];        $ProductId = $_POST['ProductId'];        $SaleDate = $_POST['SaleDate'];        $branch = $_POST['branch'];        $total = $quantity * $salesAmount;        $data = [];        $error = [];        // Validation        if (empty($employeeName)) {            $error['errorMessage'] = 'Employee name is required';        }        if (empty($salesAmount)) {            $error['errorMessage'] = 'Sales amount is required';        }        if ($quantity <= 0) {            $error['errorMessage'] = 'Quantity must be greater than zero';        }        // Check if there are any errors        if (!empty($error)) {            $data['success'] = false;            $data['errors'] = $error;            echo json_encode($data);            return;        }        // Step 1: Check stock availability        $stockResult = $currentStock->decreaseStocks($quantity, $ProductId);        if (!$stockResult['success']) {            // If stock is insufficient, return an error message            echo json_encode(['success' => false, 'message' => $stockResult['message']]);            return;        }        // Step 2: Attempt to store the sale        $saleResult = $sales->storeSales($ProductId, $quantity, $total, $SaleDate, $branch, $employeeName);        if ($saleResult['success']) {            // Sale was successful, and stock was already updated            echo json_encode(['success' => true, 'message' => 'Sale created and stock updated successfully']);        } else {            // Rollback stock update if sale creation fails            $currentStock->increaseStocks($quantity, $ProductId);            echo json_encode(['success' => false, 'message' => $saleResult['message']]);        }    }    public function showAllSalesTodayPerBranch($today,$branch)    {        $sales = new employeeViewModel();        $data = $sales->showAllSalesToday($today,$branch);        $tr = '';        if ($data){            foreach ($data as $row){                $saleId = $row['sales_id'];                $employeeName = $row['EmployeeName'];                $quantity = $row['quantity_sold'];                $date = $row['Sales_date'];                $branch = $row['branch'];                $saleAmount = $row['sale_amount'];                $tr .= '                 <tr>                  <th>'.$saleId.'</td>                  <td>'.$employeeName.'</td>                  <td>'.$quantity.'</td>                  <td>â‚±'.number_format($saleAmount).'</td>                  <td>'.$branch.'</td>                  <td>'.$date .'</td>                </tr>                ';            }            echo $tr;        }    }}if($_SERVER['REQUEST_METHOD'] === 'POST' && $_POST['action']){    $controller = new employeeViewController();    switch ($_POST['action']){        case 'showProductInfo':            $controller->showProductInfo();            break;        case 'storeSales':            $controller->storeSale();            break;    }}